<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Test_2</title>
    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
      }
      .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }

      #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 300px;
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      .pac-container {
        font-family: Roboto;
      }

      #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
      }

      #type-selector label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }
      #target {
        width: 345px;
      }
    </style>
  </head>
  <body>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <script>

//var markers = []

      function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 40.745032, lng: -74.027229},
          zoom: 15,
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          disableDoubleClickZoom: true
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });

  ptA = map.addListener('click', function(e) {
    addMarkerA(e.latLng, map);
  });

  ptB = map.addListener('dblclick', function(e) {
    addMarkerB(e.latLng, map);
  });

  ptC = map.addListener('rightclick', function(e) {
    addMarkerC(e.latLng, map);
  });
      }

function addMarkerA(latLng, map) {
  var markerA = new google.maps.Marker({
    position: latLng,
    map: map,
    draggable: true,
    label: 'A'
  });
  ptA.remove();

  markerA.addListener('click', function() {
    var infowindowA = new google.maps.InfoWindow({
      content: '<p>' + markerA.getPosition() + '</p>'
    });
    infowindowA.open(map, markerA);
    markerA.addListener('dragstart', function() {
      infowindowA.close();
    });
  });
}

function addMarkerB(latLng, map) {
  var markerB = new google.maps.Marker({
    position: latLng,
    map: map,
    draggable: true,
    label: 'B'
  });
  ptB.remove();

  markerB.addListener('click', function() {
    var infowindowB = new google.maps.InfoWindow({
      content: '<p>' + markerB.getPosition() + '</p>'
    });
    infowindowB.open(map, markerB);
    markerB.addListener('dragstart', function() {
      infowindowB.close();
    });
    });
}

function addMarkerC(latLng, map) {
  var markerC = new google.maps.Marker({
    position: latLng,
    map: map,
    draggable: true,
    label: 'C'
  });
  ptC.remove();

  markerC.addListener('click', function() {
    var infowindowC = new google.maps.InfoWindow({
      content: '<p>' + markerC.getPosition() + '</p>'
    });
    infowindowC.open(map, markerC);
    markerC.addListener('dragstart', function() {
      infowindowC.close();
    });
    });
}

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCQwLDREXVBG2lSf8NMjOABEAYhDNv74Jc&libraries=places&callback=initMap"
         async defer></script>
  </body>
</html>
